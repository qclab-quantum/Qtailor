import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import Normalize
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.cm import ScalarMappable

# 生成一些示例数据
data1 = np.array([[ 6.,  8.,  8.,  6.,  7.,  8.,  9.,  7.,  6.,  6.,  7.,  5.,  5.,  7.,
   5.,  5.,  4.],
 [10.,  7.,  7.,  8.,  8.,  7.,  6.,  7.,  4.,  5.,  5.,  5.,  5.,  3.,
   3.,  5.,  3.],
 [10.,  7.,  7.,  7.,  5.,  7.,  5.,  5.,  5.,  4.,  3.,  5.,  3.,  2.,
   3.,  3.,  3.],
 [ 9.,  9.,  6.,  5.,  6.,  6.,  4.,  6.,  4.,  4.,  3.,  4.,  3.,  3.,
   2.,  3.,  2.],
 [10.,  6.,  4.,  7.,  5.,  6.,  3.,  2.,  4.,  3.,  3.,  4.,  2.,  2.,
   2.,  2.,  2.],
 [10.,  7.,  6.,  6.,  6.,  2.,  5.,  4.,  3.,  3.,  3.,  3.,  1.,  3.,
   4.,  1.,  2.],
 [10.,  8.,  4.,  7.,  4.,  4.,  3.,  4.,  2.,  1.,  2.,  4.,  1.,  2.,
   2.,  1.,  2.],
 [ 9.,  4.,  5.,  4.,  4.,  3.,  3.,  3.,  2.,  2.,  1.,  2.,  3.,  2.,
   1.,  1.,  2.],
 [ 7.,  6.,  4.,  5.,  3.,  3.,  3.,  3.,  3.,  2.,  2.,  2.,  2.,  2.,
   1.,  2.,  1.],
 [ 8.,  6.,  4.,  3.,  3.,  1.,  2.,  3.,  3.,  1.,  1.,  3.,  1.,  2.,
   2.,  1.,  2.],
 [ 5.,  5.,  3.,  4.,  2.,  2.,  3.,  3.,  1.,  1.,  2.,  3.,  1.,  1.,
   1.,  2.,  1.],
 [ 6.,  4.,  3.,  4.,  4.,  5.,  2.,  2.,  1.,  2.,  2.,  2.,  1.,  1.,
   1.,  1., -0.],
 [ 5.,  4.,  4.,  4.,  3.,  2.,  2.,  3.,  3.,  2.,  1.,  1.,  1.,  2.,
  -0.,  0.,  0.],
 [ 4.,  5.,  3.,  1.,  3.,  2., -0.,  2.,  2.,  2.,  0.,  2.,  1.,  2.,
   0.,  0.,  1.],
 [ 4.,  5.,  3.,  2.,  1.,  3.,  1.,  2.,  1.,  2.,  1., -0.,  0.,  0.,
   1.,  1.,  1.],
 [ 4.,  5.,  3.,  3.,  2.,  1.,  2.,  1.,  1.,  2.,  0.,  1.,  0.,  2.,
   1.,  0.,  1.],
 [ 3.,  3.,  3.,  2.,  1.,  2.,  2.,  2.,  1.,  1.,  2.,  2.,  1.,  1.,
   1.,  1.,  1.],
 [ 4.,  2.,  3.,  3.,  1.,  2.,  2.,  1.,  1.,  1.,  0.,  1.,  1.,  0.,
   1.,  2.,  0.],
 [ 3.,  3.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  1., -0.,  2.,  1.,  1.,
   0.,  1.,  1.],
 [ 4.,  1.,  2.,  1.,  1.,  2.,  2.,  0.,  1.,  1.,  1.,  1.,  1.,  0.,
  -0., -0.,  1.]])
data3 =np.array([[ 4., -2.,  2.,  8., 12., 12., 16.,  8.,  9., 17., 13., 12., 18., 20.,
  15., 15.,  8.],
 [ 6.,  5., 15.,  9., 14., 11., 18., 19., 13., 17., 26., 15., 14., 15.,
  12., 19., 10.],
 [12.,  7., 15., 16., 15., 16., 20., 18.,  8., 14., 17., 20., 16., 15.,
  14., 17., 16.],
 [21., 16., 20.,  9., 16., 20., 14., 10., 13., 12., 11., 20., 19., 14.,
  12., 11., 20.],
 [ 8.,  7., 22., 12.,  9., 17., 19., 11., 19., 15., 14., 15., 12., 10.,
   8., 10.,  9.],
 [ 0., 20.,  6., 21., 14., 12., 17., 11., 10., 14., 13., 10.,  8., 12.,
   6.,  9., 12.],
 [15., 23., 15., 20., 12., 14., 19., 14., 17., 10.,  9., 15., 10., 10.,
   9., 11., 13.],
 [14., 19., 14., 19., 14., 16., 10., 12., 12.,  7., 11.,  9., 10.,  7.,
   8.,  9., 13.],
 [14., 15.,  9., 14., 13., 13.,  9.,  9., 13., 14.,  8., 11.,  9., 11.,
  15.,  3.,  4.],
 [15., 15.,  6., 15., 14., 11.,  6., 15., 15., 10.,  7.,  9., 11., 16.,
  12.,  3., 11.],
 [20., 19., 22., 18.,  6., 15., 11., 10., 12.,  5.,  9., 11., 10.,  7.,
   6., 10., -1.],
 [11., 11., 17., 11., 16., 16., 16., 16.,  8.,  9.,  9.,  3., 10., 12.,
   9.,  3.,  5.],
 [24., 11.,  7., 11.,  9., 17.,  7.,  8.,  6., 14., 11.,  5.,  5.,  3.,
   5., 11.,  9.],
 [13., 11.,  9., 19., 13.,  6.,  6., 11., 13., 10.,  8.,  6.,  4., 10.,
   5.,  5.,  5.],
 [21.,  6.,  7.,  8.,  6., 11.,  9.,  6.,  5., 11.,  5., 10.,  6., -1.,
   8.,  3., 10.],
 [15.,  8., 16., 15., 11., 15.,  6., 11.,  6., 10.,  7.,  8., 10.,  7.,
   2.,  6.,  7.],
 [12., 13., 12.,  7.,  8., 11.,  9., 10.,  9.,  7.,  5.,  6.,  7.,  5.,
   9.,  6.,  4.],
 [ 8., 17., 15.,  5., 10.,  9.,  6., 10.,  7.,  5.,  3.,  4.,  7.,  8.,
   8.,  6.,  5.],
 [ 8.,  8., 12.,  6., 16.,  6., 14.,  8.,  8.,  8.,  7., 11.,  3.,  6.,
   7.,  9.,  9.],
 [17.,  8., 10., 12., 12.,  9.,  8., 10.,  3.,  7.,  7., 10.,  5.,  2.,
   8.,  6., 10.]])

data2=np.array(
[[ 8., 9.,13., 8., 7., 6., 4.,12.,10.,11.,14., 8., 7., 7., 6., 1., 1.],
 [ 9.,13.,10.,11.,12.,12., 9.,13., 9., 5.,10., 8., 5., 6., 8., 1., 1.],
 [13., 8., 8.,16., 6., 6.,10., 7., 5., 8., 9., 9., 7., 5., 2., 1., 1.],
 [ 8., 7.,10.,10.,10., 6., 8., 6., 8., 4., 8., 8., 7., 4., 4., 1., 1.],
 [ 9., 7.,12., 5., 8., 7., 6., 7., 9., 5., 5., 6., 7., 6., 5., 1., 1.],
 [10., 7., 9.,10., 6., 8., 7., 7., 8., 4., 9., 5., 5., 2., 4., 1., 1.],
 [12., 8.,10., 8., 7., 7., 9., 6., 4., 5., 5., 7., 5., 6., 7., 1., 1.],
 [ 4., 6.,10., 7., 7., 7., 6., 2., 4., 4., 6., 6., 5., 5., 4., 1., 1.],
 [ 8., 4., 4., 4., 7., 6., 6., 5., 8., 0., 6., 3., 4., 7., 4., 1., 1.],
 [ 6., 6., 8., 9., 5., 5., 7., 4., 5., 1., 4., 6., 3., 5., 5., 1., 1.],
 [ 6., 8., 5., 3., 5., 5., 7., 6., 5., 6., 5., 3., 3., 4., 4., 1., 1.],
 [ 7., 5., 5., 6., 2., 6., 5., 2., 4., 5., 6., 4., 3., 4., 4., 1., 1.],
 [11., 5., 3., 6., 9., 4., 4., 4., 1., 4., 5., 3., 3., 3., 4., 1., 1.],
 [ 5., 4., 2., 3., 7., 2., 6., 0., 8., 3., 4., 6., 4., 5.,-0., 1., 1.],
 [ 8., 5., 3., 4., 2., 6., 4., 5., 5., 2., 3., 2., 1., 7., 5., 1., 1.],
 [ 5., 8., 4., 6., 4., 4., 3., 5., 3., 4., 1., 3.,-1., 2., 3., 1., 1.],
 [ 7., 4., 6., 4., 5., 4., 6., 2., 3., 6., 3., 3., 1., 3., 3., 1., 1.],
 [ 7., 8., 4., 4., 2., 3., 3., 1., 4., 3., 4., 3., 4., 2., 1., 1., 1.],
 [ 9., 5., 5., 5., 6., 4., 2., 3., 2., 2., 3., 4., 2., 2., 3., 1., 1.],
 [ 7., 5., 4., 1., 4., 3., 4.,-0., 3., 0., 3., 3., 3., 2., 1., 1., 1.]])

# 将数据归一化到 [0, 1] 范围
norm = Normalize(vmin=0, vmax=25)
n_data1 = norm(data1)
n_data2 = norm(data2)
n_data3 = norm(data3)
# 创建一个新的图形和 3D 轴
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

# 定义热力图的高度
heights = [0,  20,  40]

# 创建网格坐标
x, y = np.meshgrid(range(n_data1.shape[1]), range(n_data1.shape[0]))

# 创建第一个热力图
surf1 = ax.plot_surface(x, y, np.full_like(n_data1, heights[0]), rstride=1, cstride=1, facecolors=plt.cm.viridis(n_data1), shade=False)
# 创建第二个热力图
surf2 = ax.plot_surface(x, y, np.full_like(n_data2, heights[1]), rstride=1, cstride=1, facecolors=plt.cm.viridis(n_data2), shade=False)
surf3 = ax.plot_surface(x, y, np.full_like(n_data3, heights[2]), rstride=1, cstride=1, facecolors=plt.cm.viridis(n_data3), shade=False)

# 创建第三个热力图
#surf3 = ax.plot_surface(x, y, np.full_like(data3, heights[2]), rstride=1, cstride=1, facecolors=plt.cm.viridis(data3), shade=False)

# 添加颜色条
mappable = ScalarMappable(cmap='viridis')
mappable.set_array(np.concatenate([data1.flatten(),data2.flatten(),data3.flatten()]))
cbar = fig.colorbar(mappable, ax=ax, shrink=0.6, aspect=15)  # 调整 shrink 和 aspect 参数
cbar.outline.set_visible(False)
# 设置轴标签
ax.set_xlabel('T1 Relaxation Time')
ax.set_ylabel('T2 Relaxation Time \n($24\% \leq T2/T1 \leq 120\% $')
ax.set_zlabel('fidelity')

# 设置标题
# ax.set_title('3D Stacked Heatmaps')

# 设置视角
ax.view_init(elev=17, azim=-60)

# 调整轴的范围以更好地展示热力图
# ax.set_xlim(0, data1.shape[1]-1)
# ax.set_ylim(0, data1.shape[0]-1)
# ax.set_zlim(min(heights)-5, max(heights)+5)
plt.savefig('d:/fidelity.png',dpi=400)
# 显示图形
plt.show()